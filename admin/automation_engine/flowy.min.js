

var flowy = function (canvas, grab, release, snapping, rearrange) {
  if (!grab) {
    grab = function () {};
  }
  if (!release) {
    release = function () {};
  }
  if (!snapping) {
    snapping = function () {
      return true;
    };
  }
  if (!Element.prototype.matches) {
    Element.prototype.matches =
      Element.prototype.msMatchesSelector ||
      Element.prototype.webkitMatchesSelector;
  }
  if (!Element.prototype.closest) {
    Element.prototype.closest = function (s) {
      var el = this;
      do {
        if (Element.prototype.matches.call(el, s)) return el;
        el = el.parentElement || el.parentNode;
      } while (el !== null && el.nodeType === 1);
      return null;
    };
  }
  var loaded = false;
  flowy.load = function () {
    if (!loaded) loaded = true;
    else return;
    var blocks = [];
    var canvas_div = canvas;
    var active = false;
    var drag;

    // Creating Indicator Div Dynamically
    var el = document.createElement("div");
    el.classList.add("indicator");
    el.classList.add("invisible");
    canvas_div.appendChild(el);
 
    flowy.import = function (output) {
      const sanitizedHtml = DOMPurify.sanitize(output.html);
      canvas_div.innerHTML = sanitizedHtml;
      for (var a = 0; a < output.blockarr.length; a++) {
        blocks.push({
          childwidth: parseFloat(output.blockarr[a].childwidth),
          parent: parseFloat(output.blockarr[a].parent),
          id: parseFloat(output.blockarr[a].id),
          x: parseFloat(output.blockarr[a].x),
          y: parseFloat(output.blockarr[a].y),
          width: parseFloat(output.blockarr[a].width),
          height: parseFloat(output.blockarr[a].height),
        });
      }

      // Reattach event listeners to arrow-plus elements
      reattachPlusArrowListeners();

      target3BlockElementsAndAddEventListener();

      target3BlockElementsAndRemoveEventListener();
    };

    flowy.output = function () {
      var html_ser = DOMPurify.sanitize(canvas_div.innerHTML);
      var json_data = {
        html: html_ser,
        blockarr: blocks,
        blocks: [],
      };
      if (blocks.length > 0) {
        for (var i = 0; i < blocks.length; i++) {
          json_data.blocks.push({
            id: blocks[i].id,
            parent: blocks[i].parent,
            data: [],
            attr: [],
          });
          var blockParent = document.querySelector(
            ".blockid[value='" + blocks[i].id + "']"
          ).parentNode;
          blockParent.querySelectorAll("input").forEach(function (block) {
            var json_name = block.getAttribute("name");
            var json_value = block.value;
            json_data.blocks[i].data.push({
              name: json_name,
              value: json_value,
            });
          });
          Array.prototype.slice
            .call(blockParent.attributes)
            .forEach(function (attribute) {
              var jsonobj = {};
              jsonobj[attribute.name] = attribute.value;
              json_data.blocks[i].attr.push(jsonobj);
            });
        }
        return json_data;
      } 
    };

    flowy.deleteBlocks = function () {
      blocks = [];
      canvas_div.innerHTML = "\n<div class='indicator invisible'></div>";

      const canvas = document.getElementById('canvas');

        // Create the plus icon
        const plusElement = document.createElement('div');
        plusElement.classList.add('arrow-plus');

        // Use the localized image URL for the plus icon
        plusElement.innerHTML = DOMPurify.sanitize(`
          <img src="${automationEngine.assetsUrl}/arrow-plus.svg" alt="Plus Icon" />
        `);

        // Append the plus icon to the canvas
        canvas_div.appendChild(plusElement);

        // Add click event listener to the plus icon
        plusElement.addEventListener('click', function () {
          // Show the modal when the plus icon is clicked
          const modal = document.getElementById("blockModal");
          modal.style.display = "block";
        });
      
    };

    function anyEventCount() {
      var count = 0;

      // Select all blockelem elements within the canvas
      var blockElems = document.querySelectorAll("#canvas .blockelem");

      blockElems.forEach(function (blockElem) {
        // Check if the blockElem contains an 'any_event' input directly
        var anyEventInput = blockElem.querySelector('input[name="any_event"]');
        if (anyEventInput) {
          count++;
        }
      });

      return count;
    }

     // ---------- START NEW IF BLOCK WORK ----------

    // Begin Drag Function
    function beginDrag(event) {

      const activeTab = document.querySelector(".navactive");

      // Select the 'any_event' input directly from closestDiv
      const closestElement = event.target.closest(".create-flowy");
      var anyEventInput = closestElement.querySelector("input[name='any_event']");

      // Check if the dragged block is an 'if_condition' block
      const ifConditionInput = closestElement.querySelector("input[name='if_condition']");
      const isIfConditionBlock = ifConditionInput && ifConditionInput.value === "1";

      if (anyEventInput) {
        var anyCount2 = anyEventCount();

        if (anyCount2 >= 1) {
          alert("Only one 'Any' trigger allowed per workflow");
          return;
        }
      }

      if (activeTab.id === "actions" && document.getElementById("canvas").childNodes.length <= 3) {
        alert("Trigger must be the first block");
        return;
      } else {
        // Normal Block Addition (Non-if_condition block)
        if (!isIfConditionBlock && event.which != 3 && event.target.closest(".create-flowy")) {
          var newNode = event.target.closest(".create-flowy").cloneNode(true);
          newNode.classList.add("block");
          newNode.classList.add("canvas-block");

          newNode.innerHTML += `<div id="dropdown" class="dropdown-container">
            <div class="delete-button">
              <button>Delete Block</button>
            </div>
          </div>`;

          if (blocks.length === 0) {
            newNode.innerHTML +=
              "<input type='hidden' name='blockid' class='blockid' value='" + blocks.length + "'>";
            canvas_div.appendChild(newNode);
            drag = document.querySelector(".blockid[value='" + blocks.length + "']").parentNode;

          } else {
            newNode.innerHTML +=
              "<input type='hidden' name='blockid' class='blockid' value='" +
              (Math.max.apply(Math, blocks.map((a) => a.id)) + 1) + "'>";

            if (drag === undefined || drag === null) {
              drag = newNode;
            }

            drawArrow();
            canvas_div.appendChild(newNode);
            drag = document.querySelector(
              ".blockid[value='" +
                (parseInt(Math.max.apply(Math, blocks.map((a) => a.id))) + 1) +
                "']"
            ).parentNode;
          }
          blockGrabbed(event.target.closest(".create-flowy")); // Grab Block and add Disabled Class
          blockReleased();
          active = true;
        } 
        // If it's an if_condition block
        else if (isIfConditionBlock && event.which != 3 && event.target.closest(".create-flowy")) {
          // Same block creation process
          var newNode = event.target.closest(".create-flowy").cloneNode(true);
          newNode.classList.add("block");
          newNode.classList.add("canvas-block");

          newNode.innerHTML += `<div id="dropdown" class="dropdown-container">
            <div class="delete-button">
              <button>Delete Block</button>
            </div>
          </div>`;

          if (blocks.length === 0) {
            newNode.innerHTML +=
              "<input type='hidden' name='blockid' class='blockid' value='" + blocks.length + "'>";
            canvas_div.appendChild(newNode);
            drag = document.querySelector(".blockid[value='" + blocks.length + "']").parentNode;

            // Append the second arrowblock when the first if_condition block is added
            drawIfBlocks(newNode);  // Pass the new block as an argument

          } else {
            newNode.innerHTML +=
              "<input type='hidden' name='blockid' class='blockid' value='" +
              (Math.max.apply(Math, blocks.map((a) => a.id)) + 1) + "'>";

            if (drag === undefined || drag === null) {
              drag = newNode;
            }

            // Call drawArrow() before appending the block
            drawArrow();

            canvas_div.appendChild(newNode);
            drag = document.querySelector(
              ".blockid[value='" +
                (parseInt(Math.max.apply(Math, blocks.map((a) => a.id))) + 1) +
                "']"
            ).parentNode;

            // Call drawIfBlocks() again after appending the block
            drawIfBlocks(newNode);  // Pass the new block as an argument
          }
          blockGrabbed(event.target.closest(".create-flowy")); // Grab Block and add Disabled Class
          blockReleased();
          active = true;
        }
      }
    }

//Updated drawIfBlocks function with block position
function drawIfBlocks(ifBlock) {

  requestAnimationFrame(() => {
    const canvas = document.getElementById("canvas");

    // Get the block's position and dimensions
    const blockRect = ifBlock.getBoundingClientRect();
    const canvasRect = canvas.getBoundingClientRect();

    // Calculate the block's position relative to the canvas
    const blockLeft = blockRect.left - canvasRect.left + canvas.scrollLeft;
    const blockTop = blockRect.top - canvasRect.top + canvas.scrollTop;

    const blockWidth = ifBlock.offsetWidth;
    const blockHeight = ifBlock.offsetHeight;

    // Calculate center X position of the ifBlock
    const centerX = blockLeft + blockWidth / 2;
    const verticalPosition = blockTop + blockHeight;

    // Arrow dimensions (increased arrow width)
    const arrowWidth = 245; // Increased arrow width
    const arrowHeight = 100;  // Arrow height remains the same

    // Adjust these values if needed
    const yesArrowAdjustment = 0;
    const noArrowAdjustment = 0;

    const ifBlockId = ifBlock.querySelector(".blockid").value;

    // NO Arrow Block
    const noArrowLeft = centerX - arrowWidth + noArrowAdjustment;
    const noArrowTop = verticalPosition;
    const noArrowDiv = document.createElement('div');
    noArrowDiv.className = 'ifArrowblock';
    noArrowDiv.style.position = 'absolute';
    noArrowDiv.style.left = `${noArrowLeft}px`;
    noArrowDiv.style.top = `${noArrowTop}px`;
    noArrowDiv.style.width = `${arrowWidth}px`;
    noArrowDiv.style.height = `${arrowHeight}px`;

    // Create the NO arrow's inner content
    noArrowDiv.innerHTML = `
      <input type="hidden" value="${ifBlockId}" class="arrowid">
      <svg width="${arrowWidth}" height="${arrowHeight}" viewBox="0 0 ${arrowWidth} ${arrowHeight}" preserveAspectRatio="none" fill="none" xmlns="http://www.w3.org/2000/svg">
        <!-- NO Arrow SVG paths -->
        <path d="M${arrowWidth} 0 L${arrowWidth} 50 L10 50 L10 100" stroke="#C5CCD0" stroke-width="2"></path>
        <path d="M0 95 H20 L10 100 L0 95 Z" fill="#C5CCD0"></path>
      </svg>
    `;

    // Create the NO label element
    const noLabel = document.createElement('div');
    noLabel.className = 'arrow-label-no';
    noLabel.textContent = 'NO';

    // Add event listener to the NO label
    noLabel.addEventListener('click', function(event) {
      event.stopPropagation(); // Prevent event bubbling
      const modal = document.getElementById("blockModal");
      modal.style.display = "block";
    });

    // Append the NO label to the NO arrow block
    noArrowDiv.appendChild(noLabel);

    // YES Arrow Block
    const yesArrowLeft = centerX + yesArrowAdjustment;
    const yesArrowTop = verticalPosition;
    const yesArrowDiv = document.createElement('div');
    yesArrowDiv.className = 'ifArrowblock';
    yesArrowDiv.style.position = 'absolute';
    yesArrowDiv.style.left = `${yesArrowLeft}px`;
    yesArrowDiv.style.top = `${yesArrowTop}px`;
    yesArrowDiv.style.width = `${arrowWidth}px`;
    yesArrowDiv.style.height = `${arrowHeight}px`;

    // Create the YES arrow's inner content
    yesArrowDiv.innerHTML = `
      <input type="hidden" value="${ifBlockId}" class="arrowid">
      <svg width="${arrowWidth}" height="${arrowHeight}" viewBox="0 0 ${arrowWidth} ${arrowHeight}" preserveAspectRatio="none" fill="none" xmlns="http://www.w3.org/2000/svg">
        <!-- YES Arrow SVG paths -->
        <path d="M0 0 L0 50 L${arrowWidth - 10} 50 L${arrowWidth - 10} 100" stroke="#C5CCD0" stroke-width="2"></path>
        <path d="M${arrowWidth - 20} 95 H${arrowWidth} L${arrowWidth - 10} 100 L${arrowWidth - 20} 95 Z" fill="#C5CCD0"></path>
      </svg>
    `;

    // Create the YES label element
    const yesLabel = document.createElement('div');
    yesLabel.className = 'arrow-label-yes';
    yesLabel.textContent = 'YES';

    // Add event listener to the YES label
    yesLabel.addEventListener('click', function(event) {
      event.stopPropagation(); // Prevent event bubbling
      const modal = document.getElementById("blockModal");
      modal.style.display = "block";
    });

    // Append the YES label to the YES arrow block
    yesArrowDiv.appendChild(yesLabel);

    // Append the arrow blocks to the canvas
    canvas.appendChild(noArrowDiv);
    canvas.appendChild(yesArrowDiv);
  });
}

    function firstBlock(type) {
      if (type == "drop") {
        blockSnap(drag, true, undefined);
        active = false;
        
        blocks.push({
          parent: -1,
          childwidth: 0,
          id: parseInt(drag.querySelector(".blockid").value),
          width: parseInt(window.getComputedStyle(drag).width),
          height: parseInt(window.getComputedStyle(drag).height),
        });

         //Check if the first block is an IF condition
          var ifConditionInput = drag.querySelector("input[name='if_condition']");
          if (ifConditionInput) {

              document.querySelectorAll('.arrow-plus').forEach(function (el) {
                el.remove();
            });
          } else {
              addPlusArrowBelowLastBlock(blocks);
          }

      }
    }
    
      // updated endDrag function
      function endDrag(event) {
      
        if (event.which != 3 && active) {
          blockReleased(); // Releasing the block
      
          if (active && blocks.length == 0) {
            firstBlock("drop");  // Handles the first block
          } else if (active) {
            var blocko = blocks.map((a) => a.id);
            active = false;

            var ifConditionInput = drag.querySelector("input[name='if_condition']");

            // Snap the block to the canvas
            if (blockSnap(drag, false) &&!ifConditionInput) {
              snap(drag, blocks.length - 1, blocko);
      
              // Call addPlusArrowBelowLastBlock here
              addPlusArrowBelowLastBlock(blocks); // Pass blocks array if needed
            } else {
              active = false;
              document.querySelectorAll('.arrow-plus').forEach(function (el) {
                el.remove();
            });
            }
            
          }
        }
      
        target3BlockElementsAndAddEventListener();
        target3BlockElementsAndRemoveEventListener();
      }
      
   // ---------- END NEW IF BLOCK WORK ----------

    function drawArrow() {

      document.getElementById("canvas").innerHTML += DOMPurify.sanitize(`<div class="arrowblock">
        <input type="hidden" 
          value="${drag.querySelector(".blockid").value}" class="arrowid"
        >
        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="35" height="80" viewBox="314.5 360 11 34.818033312310945" xml:space="preserve">
          <g transform="matrix(-0.1151204795 0 0 -0.072583724 320.0222288851 391.8783924897)" id="6ANecoTQ4UhSNxTtR2Cpo"  >
            <path style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: #c5ccd0; fill-rule: nonzero; opacity: 1;"  transform=" translate(-40, -40)" d="M 60 40 L 80 80 L 40 80 L 0 80 L 20 40 L 40 0 L 60 40 z" stroke-linecap="round" />
          </g>
          <g transform="matrix(1 0 0 0.2020944398 320 375.3591774279)" id="cf4-6O7Ugzjyiph-SijuX"  >
          <g style="">
              <g transform="matrix(1 0 0 1 0 0)" id="wqoTz7TRKz64g8y4TwsIx">
            <path style="stroke: #c5ccd0; stroke-width: 2; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: none; fill-rule: nonzero; opacity: 1;"  transform=" translate(-20, -75)" d="M 20 0 L 20 10 L 20 10 L 20 150" stroke-linecap="round" />
          </g>
              <g transform="matrix(1 0 0 1 0 -75)" id="tVVcqM0Z78sKitXRo6KLw"  >
            <path style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-dashoffset: 0; stroke-linejoin: miter; stroke-miterlimit: 4; fill: #c5ccd0; fill-rule: nonzero; opacity: 1;"  transform=" translate(-20, 0)" d="M 15 145 L 25 145 L 20 150 L 15" stroke-linecap="round" />
          </g>
          </g>
          </g>
        </svg>
      </div>`);
    }

    function snap(drag, parent, blocko) {

      blocks.push({
        childwidth: 0,
        parent,
        id: parseInt(drag.querySelector(".blockid").value),
        width: parseInt(window.getComputedStyle(drag).width),
        height: parseInt(window.getComputedStyle(drag).height),
      });
    }

    function addClickListener(blockElement) {
      blockElement.addEventListener("click", (event) => {
        beginDrag(event);
        endDrag(event);
        const modal = document.getElementById("blockModal");
  modal.style.display = "none"; // Hide modal when "X" is clicked
      });
    }

    function checkAndAddClickListener() {
      const blockElements = document.querySelectorAll(".blockelem");

      blockElements.forEach((blockElement) => {
        if (!blockElement.hasClickListener) {
          addClickListener(blockElement);
          blockElement.hasClickListener = true;
        }
      });
    }

    // Initial check and add
    checkAndAddClickListener();

    flowy.checkAndAddClickListenerWhenSwitchTabs = function () {
      checkAndAddClickListener();
    };

    // Open Dropdown When Clicked on Three-Dots
    function openDropdown(event) {
      event.stopPropagation();
      const targetElement = event.target.closest(".blockyright");

      // Checking If Target Element is not "null" and Target Element Should be 3-Dots Div
      if (
        event.type === "click" &&
        targetElement &&
        targetElement.className === "blockyright"
      ) {
        // Target DropDown Container
        const targetElement = event.target.closest(".blockyright");
        const targetElementParentChildrens =
          targetElement.parentElement.children;

        let dropDownContainer;

        for (let element of targetElementParentChildrens) {
          if (element.id === "dropdown") {
            dropDownContainer = element;
            break;
          }
        }

        dropDownContainer.classList.toggle("show-dropdown");
        const dropDownDeleteButton = dropDownContainer.children[0];

        // Delete Block Logic
        dropDownDeleteButton.addEventListener("click", (event) => {
          event.stopPropagation();
          const targetParent = targetElement.parentElement;
          const targetElementParent = targetParent;
          const targetElementParentChildrens = targetElementParent.children;
          let targatedInput;

          for (const input of targetElementParentChildrens) {
            if (input.classList.contains("blockid")) {
              targatedInput = input;
              break;
            }
          }

          const targetInputElementValue = targatedInput.value;

          const filteredBlocks = blocks.filter((filterBlock) => {
            return (
              parseInt(filterBlock.id) !== parseInt(targetInputElementValue)
            );
          });

          // Change Blocks Value to Filtered Blocks Value
          blocks = filteredBlocks;

          // Removing Next Arrow Just After Block, If Next-Sibling Exist
          if (targetElementParent.nextSibling) {
            canvas_div.removeChild(targetElementParent.nextSibling);
          }

          // If nextSibling is "null", that means Block is Last-Node and We have to remove Previous Arrow/Node
          if (!targetElementParent.nextSibling) {
            canvas_div.removeChild(targetElementParent.previousSibling);
          }

          canvas_div.removeChild(targetElementParent);

          // Run this after deletion to update the plus arrow
          addPlusArrowBelowLastBlock(blocks);

          // Hiding DropDown When Block is Removed
          hideDropdown(dropDownContainer);
        });
      }

      document.getElementById("properties").style.display = "block";
    }

    function hideDropdown(element) {
      element.style.display = "none";
      element.removeAttribute("style");
    }

    function target3BlockElementsAndAddEventListener() {
      // Adding OpenDropdown Event to all 3Dots Block
      document
        .querySelectorAll("#canvas > .blockelem .blockyright")
        .forEach((blkElement) => {
          blkElement.addEventListener("click", openDropdown);
        });
    }

    function target3BlockElementsAndRemoveEventListener() {
      const blockRightElements = document.querySelectorAll("#canvas > .blockelem .blockyright");
      
      // Ensure that there is at least one element
      if (blockRightElements.length > 0) {
        blockRightElements[0].removeEventListener("click", openDropdown);
      } else {
        console.warn("No elements with the .blockyright class found to remove event listeners.");
      }
    }
    
  };

  function blockGrabbed(block) {
    grab(block);
  }

  function blockReleased() {
    release();
  }

  function blockSnap(drag, first, parent) {
    return snapping(drag, first, parent);
  }

  flowy.load();
}; 

// Function to initialize the plus icon when the canvas is empty
function initializePlusIcon() {
  const canvas = document.getElementById('canvas');

  if (canvas.children.length === 0) {
    // Create the plus icon
    const plusElement = document.createElement('div');
    plusElement.classList.add('arrow-plus');

    // Use the localized image URL for the plus icon
    plusElement.innerHTML = DOMPurify.sanitize(`
      <img src="${automationEngine.assetsUrl}/arrow-plus.svg" alt="Plus Icon" />
    `);

    // Append the plus icon to the canvas
    canvas.appendChild(plusElement);

    // Add click event listener to the plus icon
    plusElement.addEventListener('click', function () {
      // Show the modal when the plus icon is clicked
      const modal = document.getElementById("blockModal");
      modal.style.display = "block";
    });
  }
}


// Call this function when the page is loaded to add the plus icon if canvas is empty
initializePlusIcon();

// Modal close functionality
document.querySelector(".close").addEventListener("click", function () {
  const modal = document.getElementById("blockModal");
  modal.style.display = "none"; // Hide modal when "X" is clicked
});

// Close modal if user clicks outside of the modal content
window.onclick = function (event) {
  const modal = document.getElementById("blockModal");
  if (event.target === modal) {
    modal.style.display = "none"; // Hide modal when clicking outside of modal
  }
};

// Assuming 'automationEngine.imageAssets.arrowPlusIcon' contains the localized URL for the SVG asset
function addPlusArrowBelowLastBlock(blocks) {
  // First, remove any existing .arrow-plus elements
  document.querySelectorAll('.arrow-plus').forEach(function (el) {
      el.remove();
  });

  if (blocks.length > 0) {
      const lastBlockId = blocks[blocks.length - 1].id;
      const lastBlockElement = document.querySelector(".blockid[value='" + lastBlockId + "']").parentNode;

      const arrowPlusElement = document.createElement("div");
      arrowPlusElement.classList.add("arrow-plus");

      // Use the localized image URL
      arrowPlusElement.innerHTML = DOMPurify.sanitize(`
        <img src="${automationEngine.assetsUrl}/arrow-plus.svg" alt="Plus Icon" />
      `);

      // Append the arrow plus icon below the last block
      lastBlockElement.after(arrowPlusElement);

      // Add event listener to the plus icon
      arrowPlusElement.addEventListener('click', function () {
          const modal = document.getElementById("blockModal");
          modal.style.display = "block";
      });
  } else {
      initializePlusIcon();
  }
}

// Call this when a block is added to reinitialize the plus icon
function onBlockAdded() {
  // Logic to handle adding a block (from modal selection, etc.)
  // After block is added, call addPlusArrowBelowLastBlock to update the plus icon position
  const blocks = getBlocks(); // Assuming this fetches the current blocks in the canvas
  addPlusArrowBelowLastBlock(blocks);
}

// Function to reattach event listeners to the plus arrow
function reattachPlusArrowListeners() {
  document.querySelectorAll('.arrow-plus').forEach(function (arrowPlus) {
    arrowPlus.addEventListener('click', function () {
      const modal = document.getElementById("blockModal");
      modal.style.display = "block"; // Show modal on click
    });
  });
}